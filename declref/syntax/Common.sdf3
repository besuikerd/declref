module Common

lexical syntax

  ID             = [a-zA-Z] [a-zA-Z0-9]* 
  ID             = Keyword {reject}
  
  Keyword        = "def"
  Keyword        = "import"
  Keyword        = "module"
  Keyword        = "String"
  Keyword        = "Int"
  Keyword        = "Float"
  Keyword        = "Boolean"
  Keyword        = "true"
  Keyword        = "false"
  Keyword        = "if"
  Keyword        = "then"
  Keyword        = "else"
  Keyword        = "end"
  
  INT            = "-"? [0-9]+ 
  FLOAT          = [0-9]+"."[0-9]+
  STRING         = "\"" StringChar* "\"" 
  StringChar     = ~[\"\n] 
  StringChar     = "\\\"" 
  StringChar     = BackSlashChar 
  BackSlashChar  = "\\" 
  LAYOUT         = [\ \t\n\r] 
  CommentChar    = [\*] 
  LAYOUT         = "/*" InsideComment* "*/" 
  InsideComment  = ~[\*] 
  InsideComment  = CommentChar 
  LAYOUT         = "//" ~[\n\r]* NewLineEOF 
  NewLineEOF     = [\n\r] 
  NewLineEOF     = EOF 
  EOF            =  

lexical restrictions

  // Ensure greedy matching for lexicals
  
  CommentChar   -/- [\/]
  INT           -/- [0-9]
  FLOAT         -/- [0-9]
  ID            -/- [a-zA-Z0-9\_]
  
  // EOF may not be followed by any char
  
  EOF           -/- ~[]
  
  // Backslash chars in strings may not be followed by " 
  
  BackSlashChar -/- [\"]

context-free restrictions

  // Ensure greedy matching for comments
  
  LAYOUT? -/- [\ \t\n\r]
  LAYOUT? -/- [\/].[\/]
  LAYOUT? -/- [\/].[\*]
